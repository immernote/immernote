// Code generated by sqlc. DO NOT EDIT.
// source: spaces.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/immernote/immernote/internal/types"
)

const createSpace = `-- name: CreateSpace :exec
INSERT INTO public.spaces ("id", "handle", "name", "icon", "settings", "domains")
  VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSpaceParams struct {
	ID       uuid.UUID           `json:"id"`
	Handle   string              `json:"handle"`
	Name     string              `json:"name"`
	Icon     types.SpaceIcon     `json:"icon"`
	Settings types.SpaceSettings `json:"settings"`
	Domains  []string            `json:"domains"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) error {
	_, err := q.db.Exec(ctx, createSpace,
		arg.ID,
		arg.Handle,
		arg.Name,
		arg.Icon,
		arg.Settings,
		arg.Domains,
	)
	return err
}

const listSpacesByUserID = `-- name: ListSpacesByUserID :many
SELECT
  id, handle, name, icon, settings, domains, invitation_token, created_at, modified_at, deleted_at
FROM
  public.spaces s
WHERE
  s.id = ANY (
    SELECT
      sm.space_id
    FROM
      public.space_members sm
    WHERE
      sm.user_id = $1)
`

func (q *Queries) ListSpacesByUserID(ctx context.Context, userID uuid.UUID) ([]Space, error) {
	rows, err := q.db.Query(ctx, listSpacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Space{}
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Handle,
			&i.Name,
			&i.Icon,
			&i.Settings,
			&i.Domains,
			&i.InvitationToken,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
