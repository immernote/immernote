// Code generated by sqlc. DO NOT EDIT.
// source: blocks.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createPageBlock = `-- name: CreatePageBlock :one
INSERT INTO public.blocks ("id", "type", "rank", "content", "format", "parent_block_id", "parent_page_id", "space_id", "created_by", "modified_by")
  VALUES ($1, 'page', (
      SELECT
        (COUNT(*) + 1)::text
      FROM
        public.blocks b
      WHERE
        b.space_id = $2
        -- Avoid comparing NULL
        AND (
          CASE WHEN $3::uuid IS NULL THEN
            b.parent_page_id IS NULL
          ELSE
            b.parent_page_id = $3::uuid
          END)),
      $4,
      $5,
      $6,
      $3,
      $2,
      $7,
      $7)
RETURNING
  id, type, rank, content, format, parent_block_id, parent_page_id, space_id, created_by, modified_by, created_at, modified_at, deleted_at
`

type CreatePageBlockParams struct {
	ID            uuid.UUID   `json:"id"`
	SpaceID       uuid.UUID   `json:"space_id"`
	ParentPageID  pgtype.UUID `json:"parent_page_id"`
	Content       string      `json:"content"`
	Format        string      `json:"format"`
	ParentBlockID pgtype.UUID `json:"parent_block_id"`
	CreatedBy     uuid.UUID   `json:"created_by"`
}

func (q *Queries) CreatePageBlock(ctx context.Context, arg CreatePageBlockParams) (Block, error) {
	row := q.db.QueryRow(ctx, createPageBlock,
		arg.ID,
		arg.SpaceID,
		arg.ParentPageID,
		arg.Content,
		arg.Format,
		arg.ParentBlockID,
		arg.CreatedBy,
	)
	var i Block
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Rank,
		&i.Content,
		&i.Format,
		&i.ParentBlockID,
		&i.ParentPageID,
		&i.SpaceID,
		&i.CreatedBy,
		&i.ModifiedBy,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listPageBlocksBySpaceHandle = `-- name: ListPageBlocksBySpaceHandle :many
SELECT
  id, type, rank, content, format, parent_block_id, parent_page_id, space_id, created_by, modified_by, created_at, modified_at, deleted_at
FROM
  public.blocks b
WHERE
  b.type = 'page'
  AND b.space_id = (
    SELECT
      s.id
    FROM
      public.spaces s
    WHERE
      s.handle = $1)
  AND b.parent_page_id IS NULL
`

func (q *Queries) ListPageBlocksBySpaceHandle(ctx context.Context, handle string) ([]Block, error) {
	rows, err := q.db.Query(ctx, listPageBlocksBySpaceHandle, handle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Block{}
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Rank,
			&i.Content,
			&i.Format,
			&i.ParentBlockID,
			&i.ParentPageID,
			&i.SpaceID,
			&i.CreatedBy,
			&i.ModifiedBy,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPageBlocksBySpaceID = `-- name: ListPageBlocksBySpaceID :many
SELECT
  id, type, rank, content, format, parent_block_id, parent_page_id, space_id, created_by, modified_by, created_at, modified_at, deleted_at
FROM
  public.blocks b
WHERE
  b.type = 'page'
  AND b.space_id = $1
  AND b.parent_page_id = NULL
`

func (q *Queries) ListPageBlocksBySpaceID(ctx context.Context, spaceID uuid.UUID) ([]Block, error) {
	rows, err := q.db.Query(ctx, listPageBlocksBySpaceID, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Block{}
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Rank,
			&i.Content,
			&i.Format,
			&i.ParentBlockID,
			&i.ParentPageID,
			&i.SpaceID,
			&i.CreatedBy,
			&i.ModifiedBy,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
