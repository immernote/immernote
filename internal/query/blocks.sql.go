// Code generated by sqlc. DO NOT EDIT.
// source: blocks.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/immernote/immernote/internal/types"
	"github.com/jackc/pgtype"
)

const getBlock = `-- name: GetBlock :one




SELECT
  id, type, rank, content, format, space_id, created_by, modified_by, created_at, modified_at, deleted_at,
  COALESCE((
    SELECT
      array_to_json(array_agg(row_to_json(tmp)))
    FROM (
      SELECT
        cb.id, cb.rank FROM blocks cb
      WHERE
        cb.id = ANY (
          SELECT
            be.block_id FROM public.block_edges be
          WHERE
            be.parent_id = b.id)) AS tmp), '[]')::children_list AS children
FROM
  public.blocks b
WHERE
  b.id = $1
`

type GetBlockRow struct {
	ID         uuid.UUID            `json:"id"`
	Type       string               `json:"type"`
	Rank       string               `json:"rank"`
	Content    types.Map            `json:"content"`
	Format     types.Map            `json:"format"`
	SpaceID    uuid.UUID            `json:"space_id"`
	CreatedBy  uuid.UUID            `json:"created_by"`
	ModifiedBy uuid.UUID            `json:"modified_by"`
	CreatedAt  time.Time            `json:"created_at"`
	ModifiedAt time.Time            `json:"modified_at"`
	DeletedAt  pgtype.Timestamptz   `json:"deleted_at"`
	Children   types.RankedChildren `json:"children"`
}

// -- name: ListBlocksByTypeParentID :many
// SELECT
//   *,
//   COALESCE((
//     SELECT
//       array_to_json(array_agg(row_to_json(tmp)))
//     FROM (
//       SELECT
//         cb.id, cb.rank FROM blocks cb
//       WHERE
//         cb.id = ANY (
//           SELECT
//             be.block_id FROM public.block_edges be
//           WHERE
//             be.parent_id = b.id)) AS tmp), '[]')::children_list AS children
// FROM
//   public.blocks b
// WHERE (
//   CASE WHEN @set_type::boolean THEN
//     b.type = @type::text
//   ELSE
//     TRUE
//   END)
//   AND b.id = ANY (
//     SELECT
//       be.block_id
//     FROM
//       public.block_edges be
//     WHERE
//       be.parent_id = @parent_id);
// -- name: ListBlocksByTypeSpaceHandleNullParentPageID :many
// SELECT
//   *,
//   COALESCE((
//     SELECT
//       array_to_json(array_agg(row_to_json(tmp)))
//     FROM (
//       SELECT
//         cb.id, cb.rank FROM blocks cb
//       WHERE
//         cb.parent_page_id = b.id) AS tmp), '[]')::children_list AS children
// FROM
//   public.blocks b
// WHERE (
//   CASE WHEN nullif (@type::text, '') IS NOT NULL THEN
//     b.type = @type::text
//   ELSE
//     TRUE
//   END)
//   AND b.space_id = (
//     SELECT
//       s.id
//     FROM
//       public.spaces s
//     WHERE
//       s.handle = @space_handle)
//   AND b.parent_page_id IS NULL;
// -- name: ListBlocksByTypeSpaceIDParentPageID :many
// SELECT
//   *,
//   COALESCE((
//     SELECT
//       array_to_json(array_agg(row_to_json(tmp)))
//     FROM (
//       SELECT
//         cb.id, cb.rank FROM blocks cb
//       WHERE
//         cb.parent_page_id = b.id) AS tmp), '[]')::children_list AS children
// FROM
//   public.blocks b
// WHERE (
//   CASE WHEN nullif (@type::text, '') IS NOT NULL THEN
//     b.type = @type::text
//   ELSE
//     TRUE
//   END)
//   AND b.space_id = @space_id
//   AND (b.id = @parent_page_id
//     OR b.parent_page_id = @parent_page_id);
// -- name: ListBlocksByTypeSpaceIDNullParentPageID :many
// SELECT
//   *,
//   COALESCE((
//     SELECT
//       array_to_json(array_agg(row_to_json(tmp)))
//     FROM (
//       SELECT
//         cb.id, cb.rank FROM blocks cb
//       WHERE
//         cb.parent_page_id = b.id) AS tmp), '[]')::children_list AS children
// FROM
//   public.blocks b
// WHERE (
//   CASE WHEN nullif (@type::text, '') IS NOT NULL THEN
//     b.type = @type::text
//   ELSE
//     TRUE
//   END)
//   AND b.space_id = @space_id
//   AND b.parent_page_id IS NULL;
func (q *Queries) GetBlock(ctx context.Context, id uuid.UUID) (GetBlockRow, error) {
	row := q.db.QueryRow(ctx, getBlock, id)
	var i GetBlockRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Rank,
		&i.Content,
		&i.Format,
		&i.SpaceID,
		&i.CreatedBy,
		&i.ModifiedBy,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
		&i.Children,
	)
	return i, err
}
