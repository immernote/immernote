// Code generated by sqlc. DO NOT EDIT.
// source: page_sets.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const createPageSet = `-- name: CreatePageSet :exec
INSERT INTO public.page_sets ("root_id", "page_id", "lft", "rgt")
  VALUES ($1, $2, $3, $4)
`

type CreatePageSetParams struct {
	RootID uuid.UUID `json:"root_id"`
	PageID uuid.UUID `json:"page_id"`
	Lft    int32     `json:"lft"`
	Rgt    int32     `json:"rgt"`
}

func (q *Queries) CreatePageSet(ctx context.Context, arg CreatePageSetParams) error {
	_, err := q.db.Exec(ctx, createPageSet,
		arg.RootID,
		arg.PageID,
		arg.Lft,
		arg.Rgt,
	)
	return err
}

const createPageSetByParentID = `-- name: CreatePageSetByParentID :exec
INSERT INTO public.page_sets ("root_id", "page_id", "lft", "rgt")
SELECT
  ps.root_id,
  $1,
  ps.rgt - 2,
  ps.rgt - 1
FROM
  public.page_sets ps
WHERE
  ps.page_id = $2
`

type CreatePageSetByParentIDParams struct {
	PageID   uuid.UUID `json:"page_id"`
	ParentID uuid.UUID `json:"parent_id"`
}

func (q *Queries) CreatePageSetByParentID(ctx context.Context, arg CreatePageSetByParentIDParams) error {
	_, err := q.db.Exec(ctx, createPageSetByParentID, arg.PageID, arg.ParentID)
	return err
}

const getPageSet = `-- name: GetPageSet :one
SELECT
  root_id, page_id, lft, rgt
FROM
  public.page_sets ps
WHERE
  ps.page_id = $1
`

func (q *Queries) GetPageSet(ctx context.Context, pageID uuid.UUID) (PageSet, error) {
	row := q.db.QueryRow(ctx, getPageSet, pageID)
	var i PageSet
	err := row.Scan(
		&i.RootID,
		&i.PageID,
		&i.Lft,
		&i.Rgt,
	)
	return i, err
}

const listPageSets = `-- name: ListPageSets :many
SELECT
  root_id, page_id, lft, rgt
FROM
  public.page_sets ps
WHERE
  ps.root_id = $1
  OR ps.root_id = (
    SELECT
      pss.root_id
    FROM
      public.page_sets pss
    WHERE
      pss.page_id = $1)
`

func (q *Queries) ListPageSets(ctx context.Context, rootID uuid.UUID) ([]PageSet, error) {
	rows, err := q.db.Query(ctx, listPageSets, rootID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PageSet{}
	for rows.Next() {
		var i PageSet
		if err := rows.Scan(
			&i.RootID,
			&i.PageID,
			&i.Lft,
			&i.Rgt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const preparePageSets = `-- name: PreparePageSets :exec
UPDATE
  public.page_sets
SET
  rgt = CASE WHEN rgt > parent_set.parent_rgt - 1 THEN
    rgt + 2
  ELSE
    rgt
  END,
  lft = CASE WHEN lft > parent_set.parent_rgt - 1 THEN
    lft + 2
  ELSE
    lft
  END
FROM (
  SELECT
    parent_ps.root_id AS parent_root_id,
    parent_ps.rgt AS parent_rgt
  FROM
    public.page_sets parent_ps
  WHERE
    parent_ps.page_id = $1) AS parent_set
WHERE
  root_id = parent_set.parent_root_id
  AND (lft > parent_set.parent_rgt - 1
    OR rgt > parent_set.parent_rgt - 1)
`

func (q *Queries) PreparePageSets(ctx context.Context, parentID uuid.UUID) error {
	_, err := q.db.Exec(ctx, preparePageSets, parentID)
	return err
}
