// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/immernote/immernote/internal/types"
	"github.com/jackc/pgtype"
)

const createUserByID = `-- name: CreateUserByID :exec
INSERT INTO public.users ("id", "email", "name", "avatar", "settings")
  VALUES ($1, $2, $3, $4, $5)
`

type CreateUserByIDParams struct {
	ID       uuid.UUID          `json:"id"`
	Email    string             `json:"email"`
	Name     string             `json:"name"`
	Avatar   string             `json:"avatar"`
	Settings types.UserSettings `json:"settings"`
}

func (q *Queries) CreateUserByID(ctx context.Context, arg CreateUserByIDParams) error {
	_, err := q.db.Exec(ctx, createUserByID,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Avatar,
		arg.Settings,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id, email, name, avatar, settings, confirmation_token, confirmation_sent_at, invited_at, confirmed_at, created_at, modified_at, deleted_at
FROM
  public.users
WHERE
  email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Avatar,
		&i.Settings,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.InvitedAt,
		&i.ConfirmedAt,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  id, email, name, avatar, settings, confirmation_token, confirmation_sent_at, invited_at, confirmed_at, created_at, modified_at, deleted_at
FROM
  public.users
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Avatar,
		&i.Settings,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.InvitedAt,
		&i.ConfirmedAt,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hasUserByEmail = `-- name: HasUserByEmail :one
SELECT
  EXISTS (
    SELECT
      u.id
    FROM
      public.users u
    WHERE
      u.email = $1
    LIMIT 1)
`

func (q *Queries) HasUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, hasUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const hasValidConfirmationTokenByUserID = `-- name: HasValidConfirmationTokenByUserID :one
SELECT
  EXISTS (
    SELECT
      1
    FROM
      public.users
    WHERE
      id = $1
      AND confirmation_sent_at >= now() - INTERVAL '15 minutes'
    LIMIT 1)
`

func (q *Queries) HasValidConfirmationTokenByUserID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, hasValidConfirmationTokenByUserID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUserConfirmationTokenByID = `-- name: UpdateUserConfirmationTokenByID :one
UPDATE
  public.users
SET
  confirmation_token = $2,
  confirmation_sent_at = NOW()
WHERE
  id = $1
RETURNING
  id, email, name, avatar, settings, confirmation_token, confirmation_sent_at, invited_at, confirmed_at, created_at, modified_at, deleted_at
`

type UpdateUserConfirmationTokenByIDParams struct {
	ID                uuid.UUID   `json:"id"`
	ConfirmationToken pgtype.Text `json:"confirmation_token"`
}

func (q *Queries) UpdateUserConfirmationTokenByID(ctx context.Context, arg UpdateUserConfirmationTokenByIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserConfirmationTokenByID, arg.ID, arg.ConfirmationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Avatar,
		&i.Settings,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.InvitedAt,
		&i.ConfirmedAt,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserConfirmedAtByID = `-- name: UpdateUserConfirmedAtByID :one
UPDATE
  public.users
SET
  confirmed_at = NOW()
WHERE
  id = $1
RETURNING
  id, email, name, avatar, settings, confirmation_token, confirmation_sent_at, invited_at, confirmed_at, created_at, modified_at, deleted_at
`

func (q *Queries) UpdateUserConfirmedAtByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, updateUserConfirmedAtByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Avatar,
		&i.Settings,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.InvitedAt,
		&i.ConfirmedAt,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DeletedAt,
	)
	return i, err
}
